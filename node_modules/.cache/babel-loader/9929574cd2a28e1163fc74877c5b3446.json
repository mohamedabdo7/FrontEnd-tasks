{"ast":null,"code":"var _jsxFileName = \"/home/mhmdabdo/Desktop/calvita/frontend/src/components/UI/Form/Input/Input.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./Input.scss\";\nimport { useField, useFormikContext } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = _ref => {\n  _s();\n\n  let {\n    icon,\n    isIcon,\n    iconClick,\n    disabled,\n    inputChange,\n    onChangeValue,\n    isEdit,\n    type,\n    autoComplete,\n    inputMode,\n    ...props\n  } = _ref;\n  const [field, meta] = useField(props);\n  const {\n    setFieldValue\n  } = useFormikContext();\n\n  const onInputChange = value => {\n    if (inputChange) {\n      inputChange(value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: disabled ? \"disabled\" : \"\",\n      ...props,\n      ...field,\n      // type={type || \"text\"}\n      // inputMode={inputMode || \"text\"}\n      // onKeyUp={(e: any) => {\n      //   const value = e.target.value;\n      //   // console.log(\"value\", field.name, field.value);\n      //   setFieldValue(field.name, value);\n      //   if (onChangeValue) onChangeValue(value, field.name);\n      //   onInputChange(value);\n      // }}\n      disabled: disabled,\n      autoComplete: autoComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), isIcon ? /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"icon\",\n      src: icon,\n      alt: \"icon\",\n      onClick: iconClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error \",\n      children: meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error\",\n        children: meta.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"zK/zaPC6qCHIxG9rsnQpqi9/TT4=\", false, function () {\n  return [useField, useFormikContext];\n});\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/home/mhmdabdo/Desktop/calvita/frontend/src/components/UI/Form/Input/Input.tsx"],"names":["React","useField","useFormikContext","Input","icon","isIcon","iconClick","disabled","inputChange","onChangeValue","isEdit","type","autoComplete","inputMode","props","field","meta","setFieldValue","onInputChange","value","touched","error"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;AACA,SAASC,QAAT,EAAmBC,gBAAnB,QAA2C,QAA3C;;;AA4BA,MAAMC,KAA2B,GAAG,QAY9B;AAAA;;AAAA,MAZ+B;AACnCC,IAAAA,IADmC;AAEnCC,IAAAA,MAFmC;AAGnCC,IAAAA,SAHmC;AAInCC,IAAAA,QAJmC;AAKnCC,IAAAA,WALmC;AAMnCC,IAAAA,aANmC;AAOnCC,IAAAA,MAPmC;AAQnCC,IAAAA,IARmC;AASnCC,IAAAA,YATmC;AAUnCC,IAAAA,SAVmC;AAWnC,OAAGC;AAXgC,GAY/B;AACJ,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBf,QAAQ,CAACa,KAAD,CAA9B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAoBf,gBAAgB,EAA1C;;AACA,QAAMgB,aAAa,GAAIC,KAAD,IAAmB;AACvC,QAAIX,WAAJ,EAAiB;AACfA,MAAAA,WAAW,CAACW,KAAD,CAAX;AACD;AACF,GAJD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BACE;AACE,MAAA,SAAS,EAAEZ,QAAQ,GAAG,UAAH,GAAgB,EADrC;AAAA,SAEMO,KAFN;AAAA,SAGMC,KAHN;AAIE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,QAAQ,EAAER,QAbZ;AAcE,MAAA,YAAY,EAAEK;AAdhB;AAAA;AAAA;AAAA;AAAA,YADF,EAiBGP,MAAM,gBACL;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,GAAG,EAAED,IAA3B;AAAiC,MAAA,GAAG,EAAC,MAArC;AAA4C,MAAA,OAAO,EAAEE;AAArD;AAAA;AAAA;AAAA;AAAA,YADK,GAEH,IAnBN,eAqBE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,gBACGU,IAAI,CAACI,OAAL,IAAgBJ,IAAI,CAACK,KAArB,gBACC;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA,kBAAyBL,IAAI,CAACK;AAA9B;AAAA;AAAA;AAAA;AAAA,cADD,GAEG;AAHN;AAAA;AAAA;AAAA;AAAA,YArBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAjDD;;GAAMlB,K;UAakBF,Q,EACIC,gB;;;KAdtBC,K;AAmDN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\nimport \"./Input.scss\";\nimport { useField, useFormikContext } from \"formik\";\n\ntype InputProps = {\n  iconClick?: () => void;\n  inputChange?: (value: string) => void;\n  name: string;\n  placeholder?: string;\n  type: string;\n  icon?: string;\n  isIcon?: boolean;\n  className?: string;\n  pattern?: string;\n  disabled?: boolean;\n  autoComplete?: string;\n  onChangeValue?: (value: string, fieldName: string) => void;\n  isEdit?: boolean;\n  inputMode?:\n    | \"text\"\n    | \"none\"\n    | \"tel\"\n    | \"url\"\n    | \"email\"\n    | \"numeric\"\n    | \"decimal\"\n    | \"search\"\n    | undefined;\n};\n\nconst Input: React.FC<InputProps> = ({\n  icon,\n  isIcon,\n  iconClick,\n  disabled,\n  inputChange,\n  onChangeValue,\n  isEdit,\n  type,\n  autoComplete,\n  inputMode,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  const { setFieldValue } = useFormikContext();\n  const onInputChange = (value: string) => {\n    if (inputChange) {\n      inputChange(value);\n    }\n  };\n  return (\n    <div className=\"input-container\">\n      <input\n        className={disabled ? \"disabled\" : \"\"}\n        {...props}\n        {...field}\n        // type={type || \"text\"}\n        // inputMode={inputMode || \"text\"}\n        // onKeyUp={(e: any) => {\n        //   const value = e.target.value;\n        //   // console.log(\"value\", field.name, field.value);\n        //   setFieldValue(field.name, value);\n        //   if (onChangeValue) onChangeValue(value, field.name);\n        //   onInputChange(value);\n        // }}\n        disabled={disabled}\n        autoComplete={autoComplete}\n      />\n      {isIcon ? (\n        <img className=\"icon\" src={icon} alt=\"icon\" onClick={iconClick}></img>\n      ) : null}\n\n      <div className=\"error \">\n        {meta.touched && meta.error ? (\n          <span className=\"error\">{meta.error}</span>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}